version: '2.1'

services:
  frontend:
    build: video-sharing-frontend/
    mem_limit: 350m
    networks:
      - my-network
    ports:
      - "8083:80"

  user:
    build: video-sharing-microservices/User-Microservice
    mem_limit: 250m
    networks:
      - my-network
    ports:
      - "8080:80"
    environment:
      - SPRING_PROFILES_ACTIVE=docker-compose
      - SPRING_CONFIG_LOCATION=file:/resources-config/application.yml,file:/resources-config/user.yml
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USER}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE=admin
      - SPRING_DATA_MONGODB_USERNAME=${MONGODB_USER}
      - SPRING_DATA_MONGODB_PASSWORD=${MONGODB_PASSWORD}
    volumes:
      - $PWD/resources-config:/resources-config
    depends_on:
      mongodb_users:
        condition: service_healthy

  mongodb_users:
    image: mongo:3.6.9
    mem_limit: 350m
    networks:
      - my-network
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
    command: mongod --smallfiles
    healthcheck:
      test: "mongo --eval 'db.stats().ok'"
      interval: 10s
      timeout: 5s
      retries: 10

  video:
    build: video-sharing-microservices/video-microservice
    mem_limit: 250m
    networks:
      - my-network
    ports:
      - "8081:80"
    environment:
      - SPRING_PROFILES_ACTIVE=docker-compose
      - SPRING_CONFIG_LOCATION=file:/resources-config/application.yml,file:/resources-config/video.yml
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USER}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE=admin
      - SPRING_DATA_MONGODB_USERNAME=${MONGODB_USER}
      - SPRING_DATA_MONGODB_PASSWORD=${MONGODB_PASSWORD}
    volumes:
      - $PWD/resources-config:/resources-config
    depends_on:
      mongodb_videos:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  mongodb_videos:
    image: mongo:3.6.9
    mem_limit: 350m
    networks:
      - my-network
    ports:
      - "27018:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
    command: mongod --smallfiles
    healthcheck:
      test: "mongo --eval 'db.stats().ok'"
      interval: 10s
      timeout: 5s
      retries: 10

  comment:
    build: video-sharing-microservices/Comment-Microservice
    mem_limit: 250m
    networks:
      - my-network
    ports:
      - "8082:80"
    environment:
      - SPRING_PROFILES_ACTIVE=docker-compose
      - SPRING_CONFIG_LOCATION=file:/resources-config/application.yml,file:/resources-config/comment.yml
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USER}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE=admin
      - SPRING_DATA_MONGODB_USERNAME=${MONGODB_USER}
      - SPRING_DATA_MONGODB_PASSWORD=${MONGODB_PASSWORD}
    volumes:
      - $PWD/resources-config:/resources-config
    depends_on:
      mongodb_comments:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  mongodb_comments:
    image: mongo:3.6.9
    mem_limit: 350m
    networks:
      - my-network
    ports:
      - "27019:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
    command: mongod --smallfiles
    healthcheck:
      test: "mongo --eval 'db.stats().ok'"
      interval: 10s
      timeout: 5s
      retries: 10

  rabbitmq:
    image: rabbitmq:3.8.9-management
    mem_limit: 250m
    networks:
      - my-network
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 15s
      timeout: 5s
      retries: 5

  docker:
     # Starts a Docker daemon at the DNS name "docker"
     image: docker:dind
     privileged: yes
     volumes:
       - "/home:/home"
       - "jenkins-docker-certs:/certs/client"
       - "jenkins-data:/var/jenkins_home"
     environment:
        # DOCKER_TLS_CERTDIR defaults to "/certs
       - DOCKER_TLS_CERTDIR=/certs
     networks:
       - my-network

  jenkins-ci:
    image: jenkinsci/blueocean
    environment:
      - DOCKER_CERT_PATH=/certs/client
      - DOCKER_TLS_VERIFY=1
      - DOCKER_HOST=tcp://docker:2376
    volumes:
      - "/home:/home"
      - "jenkins-docker-certs:/certs/client:ro"
      - "jenkins-data:/var/jenkins_home"
    networks:
      - my-network
    ports:
      # 8080 on host already taken by the backend
      - "8000:8080"

volumes:
  jenkins-docker-certs:
  jenkins-data:

networks:
  my-network:
    name: my-network
